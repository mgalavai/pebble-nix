name: Build with Pebble SDK

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install Nix with necessary configuration
      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            allow-unsafe-native-code-during-evaluation = true
            allow-import-from-derivation = true

      - name: Check Nix installation
        run: |
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          echo "Nix version:"
          nix --version

      # Build the Pebble project using the real SDK
      - name: Build Pebble project
        env:
          NIXPKGS_ALLOW_INSECURE: "1"  # For Python 2.7
          NIXPKGS_ALLOW_BROKEN: "1"    # For potentially broken packages
          NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM: "1"  # For flexibility
        run: |
          echo "Building with Pebble SDK via Nix..."
          # Add unstable channel for newer packages
          nix-channel --add https://nixos.org/channels/nixos-unstable nixos
          nix-channel --update
          
          # Create a wrapper script to handle additional environment settings
          cat > build.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Set NIX_BUILD_SHELL to bash to avoid any potential shell issues
          export NIX_BUILD_SHELL=/bin/bash
          
          # Print debugging info for Nix
          echo "Nix system information:"
          nix-info -m || echo "nix-info not available"
          
          # Print nixpkgs version
          echo "Using nixpkgs version:"
          nix-instantiate --eval -E '(import <nixpkgs> {}).lib.version' || echo "Could not determine nixpkgs version"
          
          # Check if nodejs is available
          echo "Checking nodejs availability:"
          nix-env -qa nodejs || echo "Could not query nodejs package"
          
          # Build with extra safety flags and show extensive tracing
          echo "Starting build with tracing enabled..."
          nix build --show-trace --verbose --impure \
            --option allow-import-from-derivation true \
            --option allow-unsupported-system true
          
          # Check the result and show build artifacts
          if [ -L result ]; then
            echo "Build succeeded! Result directory contents:"
            ls -la result/
            find result -type f -name "*.pbw" | while read pbw; do
              echo "Found .pbw file: $pbw"
              file "$pbw" || echo "Could not determine file type"
              ls -la "$pbw"
            done
          else
            echo "Build failed, no result symlink found"
            exit 1
          fi
          EOF
          
          # Make the script executable
          chmod +x build.sh
          
          # Run the wrapper script with proper error handling
          ./build.sh || {
            echo "Build failed, checking for error logs..."
            find . -name "*.log" -exec cat {} \; || echo "No log files found"
            exit 1
          }

      # Upload artifacts
      - name: Upload Pebble app artifact
        uses: actions/upload-artifact@v4
        with:
          name: pebble-app
          path: result/bin/*.pbw
          if-no-files-found: warn